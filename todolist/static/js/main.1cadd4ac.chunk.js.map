{"version":3,"sources":["components/ToDoHeader.jsx","components/ToDoAddTasks.jsx","components/containers/AddTasksContainer.jsx","store/todoList/todoActions.js","components/NewTask.jsx","components/containers/NewTask.jsx","components/Tasks.jsx","components/containers/TasksContainer.jsx","components/ToDoWrap.jsx","App.js","store/todoList/todoReducers.js","store/reducers.js","serviceWorker.js","index.js"],"names":["ToDoHeader","react_default","a","createElement","ToDoAddTasks","addTasksByEnter","e","addInp","currentTarget","value","trim","key","_this","props","addTask","target","inputChange","addTasks","document","getElementById","addInputChnage","_React$createElement","className","type","name","id","this","inputValue","onChange","onKeyPress","Object","defineProperty","onClick","Component","AddTasksContainer","components_ToDoAddTasks","mapDispatchToProps","task","payload","str","AddTasksWrapped","connect","state","ToDoReducer","NewTask","removeTaskes","removeTask","htmlFor","NewTaskContainer","components_NewTask","ind","NewTaskWrapped","Tasks","tasks","map","item","TasksContainer","components_Tasks","TasksWrapped","ToDoWrap","components_ToDoHeader","App","components_ToDoWrap","initialState","combineReducers","arguments","length","undefined","action","objectSpread","concat","filter","arr","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cadd4ac.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n\r\nconst ToDoHeader = () => {\r\n    return(\r\n        <h1>To Do List</h1>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader;","import React, { Component } from 'react';\r\nimport '../css/AddTasks.css';\r\n\r\nclass ToDoAddTasks extends Component {\r\n\r\n    addTasksByEnter = (e) => {\r\n        const addInp = e.currentTarget.value.trim();\r\n\r\n        if(e.key == 'Enter' && addInp !== '') {\r\n            this.props.addTask(e.target.value);\r\n            this.props.inputChange('');\r\n        }\r\n\r\n   \r\n    }\r\n\r\n    addTasks = (e) => {\r\n        const addInp = document.getElementById('addInput').value.trim();\r\n        if(addInp !== '') {\r\n            this.props.addTask(document.getElementById('addInput').value);\r\n        }\r\n\r\n       this.props.inputChange('');\r\n    }\r\n\r\n    addInputChnage = (e) => {\r\n        this.props.inputChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-tasks\">\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"input\" \r\n                    id=\"addInput\"\r\n                    value={this.props.inputValue} \r\n                    onChange={this.addInputChnage}\r\n                    onKeyPress={this.addTasksByEnter} \r\n                    value={this.props.inputValue} \r\n                    className=\"addInp\"\r\n                    placeholder=\"Add task...\" />\r\n                <button onClick={this.addTasks} className=\"addButton\"> <span>+</span>Add!</button>\r\n            </div>    \r\n            );\r\n        }\r\n    }\r\nexport default ToDoAddTasks;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ToDoAddTasks from '../ToDoAddTasks';\r\nimport { addTask, inputChange } from '../../store/todoList/todoActions';\r\n\r\n\r\nclass AddTasksContainer extends Component {\r\n    render() {\r\n        return (\r\n             <ToDoAddTasks \r\n             addTask={this.props.addTask}\r\n             inputChange={this.props.inputChange}\r\n             inputValue={this.props.inputValue}/>\r\n             \r\n            );\r\n        }\r\n    }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n           inputValue: state.ToDoReducer.inputValue\r\n    }\r\n}\r\n    \r\n const mapDispatchToProps = {\r\n        addTask,\r\n        inputChange\r\n    }\r\n    \r\nexport const AddTasksWrapped =  connect(mapStateToProps,mapDispatchToProps)(AddTasksContainer);\r\n","export const ADD_TASK = \"ADD_TASK\";\r\nexport const INPUT_CHANGE = \"INPUT_CHANGE\";\r\nexport const REMOVE_TASK = \"REMOVE_TASK\";\r\n\r\n\r\nexport const addTask = (task) => ({\r\n    type: ADD_TASK,\r\n    payload: task\r\n});\r\n\r\nexport const inputChange = (str) => ({\r\n    type: INPUT_CHANGE,\r\n    payload: str\r\n})\r\n\r\nexport const removeTask = (ind) => ({\r\n    type: REMOVE_TASK,\r\n    payload: ind\r\n})","import React, { Component, Fragment } from 'react';\r\n\r\nclass NewTask extends Component {\r\n\r\n    removeTaskes = () => {\r\n        this.props.removeTask(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n             <div className=\"task slideRight\">\r\n                <input type=\"checkbox\" id={this.props.id} name=\"done\"/>\r\n                <label htmlFor={this.props.id}><p>{this.props.task}</p></label>\r\n                <button onClick={this.removeTaskes} className=\"remove\">remove</button>\r\n             </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\nexport default NewTask;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport NewTask from '../NewTask';\r\nimport { removeTask } from '../../store/todoList/todoActions';\r\n\r\n\r\nclass NewTaskContainer extends Component {\r\n    render() {\r\n        return (\r\n             <NewTask \r\n            removeTask={this.props.removeTask}\r\n            id={this.props.id}\r\n            task={this.props.task}\r\n            />\r\n            );\r\n        }\r\n    }\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n           \r\n        }\r\n    }\r\n    \r\n    const mapDispatchToProps = {\r\n        removeTask\r\n    }\r\n    \r\n    export const NewTaskWrapped =  connect(mapStateToProps, mapDispatchToProps)(NewTaskContainer);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { NewTaskWrapped as NewTask } from './containers/NewTask';\r\n\r\nclass Tasks extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"tasks-container\">\r\n                {\r\n                    this.props.tasks.map((item, ind) => {\r\n                       return <NewTask key={ind} id={ind} task={item} />\r\n                    })\r\n                }\r\n            </div>\r\n            );\r\n        }\r\n    }\r\nexport default Tasks;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Tasks from '../Tasks';\r\n\r\nclass TasksContainer extends Component {\r\n    render() {\r\n        return (\r\n             <Tasks \r\n             tasks={this.props.tasks}\r\n             />\r\n            );\r\n        }\r\n    }\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n           tasks: state.ToDoReducer.tasks\r\n        }\r\n    }\r\n    \r\n    const mapDispatchToProps = {\r\n    }\r\n    \r\n    export const TasksWrapped =  connect(mapStateToProps, mapDispatchToProps)(TasksContainer);\r\n","import React, { Component, Fragment } from 'react';\r\nimport '../css/ToDoWrap.css';\r\nimport ToDoHeader from './ToDoHeader';\r\nimport {AddTasksWrapped as AddTasks} from './containers/AddTasksContainer';\r\nimport {TasksWrapped as Tasks} from './containers/TasksContainer';\r\n\r\nconst ToDoWrap = () => {\r\n    return(\r\n        <div className=\"form\">\r\n            <ToDoHeader />\r\n            <AddTasks /> \r\n           <Tasks/>\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default ToDoWrap;","import React, { Component } from 'react';\nimport ToDoWrap from './components/ToDoWrap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"background\">\n        <ToDoWrap></ToDoWrap>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {\r\n    ADD_TASK,\r\n    INPUT_CHANGE,\r\n    REMOVE_TASK\r\n} from './todoActions';\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    inputValue: ''\r\n}\r\n\r\nexport const ToDoReducer = (state = initialState, action) => {\r\n\r\n\r\n    switch(action.type) {\r\n       case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.concat(action.payload)\r\n            };\r\n\r\n        case INPUT_CHANGE:\r\n            return {\r\n                ...state,\r\n                inputValue: action.payload\r\n            };\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter((item, ind, arr) => {\r\n                   \r\n                    return ind != action.payload;\r\n                })\r\n            }\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport { ToDoReducer } from './todoList/todoReducers';\r\n\r\nexport default combineReducers({\r\n   ToDoReducer\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}