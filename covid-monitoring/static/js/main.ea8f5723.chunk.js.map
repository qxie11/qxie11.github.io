{"version":3,"sources":["components/Chart/Chart.module.scss","components/CountryPicker/CountryPicker.module.scss","images/virus.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.scss","App.module.scss"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","target","i","key","App","setData","setCountry","fetching","fetchedData","src","require","alt","image","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea8f5723.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1TedW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3d5Ub\"};","module.exports = __webpack_public_path__ + \"static/media/virus.d7265326.png\";","import React from 'react'\r\nimport CountUp from 'react-countup';\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./Cards.module.scss\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n\r\n    if (!confirmed) {\r\n        return \"Loading...\"\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries from COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths from COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n    } catch (err) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name)\r\n    } catch (err) {\r\n\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from '../../api/';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from \"./Chart.module.scss\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData.length ? <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: \"Infected\",\r\n                    borderColor: \"blue\",\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: \"Deaths\",\r\n                    borderColor: \"red\",\r\n                    backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                    fill: true\r\n                }]\r\n            }}\r\n        /> : null\r\n    )\r\n\r\n    const barChart = (\r\n        confirmed ?\r\n            <Bar\r\n                data={{\r\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n                    datasets: [{\r\n                        label: \"People\",\r\n                        backgroundColor: [\"rgba(0, 0, 255, 0.5\",\r\n                            \"rgba(0, 255, 0, 0.5\",\r\n                            \"rgba(255, 0, 0, 0.5\"],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current state in ${country}` },\r\n                }}\r\n            /> :\r\n            null\r\n    )\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport { fetchCountries } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.scss\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries])\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={({ target: { value } }) => handleCountryChange(value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { useState, useEffect } from 'react';\nimport { Chart, Cards, CountryPicker } from \"./components\";\nimport styles from \"./App.module.scss\";\nimport { fetchData } from \"./api\";\n\nconst App = () => {\n\n  const [data, setData] = useState({})\n  const [country, setCountry] = useState('')\n\n  useEffect(() => {\n    const fetching = async () => {\n      const data = await fetchData();\n      setData(data);\n    }\n    fetching();\n  }, []);\n\n  const handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    setData(fetchedData);\n    setCountry(country);\n  }\n\n  return (\n    <div className={styles.container} >\n      <img src={require('./images/virus.png')} alt=\"COVID\" className={styles.image} />\n      <Cards data={data} />\n      <CountryPicker handleCountryChange={handleCountryChange} />\n      <Chart data={data} country={country} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__CmeYw\",\"card\":\"Cards_card__1-Ufh\",\"infected\":\"Cards_infected__1Pexj\",\"recovered\":\"Cards_recovered__3FzL7\",\"deaths\":\"Cards_deaths__1IWPU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3JfOT\",\"image\":\"App_image__2A8w2\"};"],"sourceRoot":""}