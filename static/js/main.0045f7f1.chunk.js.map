{"version":3,"sources":["store/weather/weatherAction.js","store/weather/weatherReducer.js","store/reducers.js","components/Titles.jsx","components/containers/TitlesContainer.jsx","components/Form.jsx","components/containers/FormContainer.jsx","components/Weather.jsx","components/containers/WeatherContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["setTemperature","temperature","type","payload","setCity","city","setCountry","country","setHumidity","humidity","setDescription","desc","setError","error","initialState","description","combineReducers","weatherReducer","state","arguments","length","undefined","action","Object","objectSpread","Titles","react_default","a","createElement","className","Component","TitlesContainer","components_Titles","Tiles_Wrapped","connect","Form","getWeather","_callee","event","_this$props","api_call","data","regenerator_default","wrap","_context","prev","next","_this","props","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","cod","main","temp","name","sys","weather","stop","this","onSubmit","placeholder","FormContainer","components_Form","mapDispatchToProps","Form_Wrapped","Weather","WeatherContainer","components_Weather","Weather_Wrapped","store","createStore","rootReducer","App","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0045f7f1.chunk.js","sourcesContent":["export const SET_TEMPERATURE = \"SET_TEMPERATURE\";\r\nexport const SET_CITY = \"SET_CITY\";\r\nexport const SET_COUNTRY = \"SET_COUNTRY\";\r\nexport const SET_HUMIDITY = 'SET_HUMIDITY';\r\nexport const SET_DESCRIPTION = \"SET_DESCRIPTION\";\r\nexport const SET_ERROR = \"SET_ERROR\";\r\n\r\nexport const setTemperature = (temperature) => ({\r\n    type: SET_TEMPERATURE,\r\n    payload: temperature\r\n});\r\n\r\nexport const setCity = (city) => ({\r\n    type: SET_CITY,\r\n    payload: city\r\n});\r\n\r\nexport const setCountry = (country) => ({\r\n    type: SET_COUNTRY,\r\n    payload: country\r\n});\r\n\r\nexport const setHumidity = (humidity) => ({\r\n    type: SET_HUMIDITY,\r\n    payload: humidity\r\n});\r\n\r\nexport const setDescription = (desc) => ({\r\n    type: SET_DESCRIPTION,\r\n    payload: desc\r\n});\r\n\r\nexport const setError = (error) => ({\r\n    type: SET_ERROR,\r\n    payload: error\r\n});\r\n","import {\r\n    SET_TEMPERATURE,\r\n    SET_CITY,\r\n    SET_COUNTRY,\r\n    SET_HUMIDITY,\r\n    SET_DESCRIPTION,\r\n    SET_ERROR\r\n} from './weatherAction';\r\n\r\nconst initialState = {\r\n    temperature: null,\r\n    city: null,\r\n    country: null,\r\n    humidity: null,\r\n    description: null,\r\n    error: null\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_TEMPERATURE:\r\n            return {\r\n                ...state,\r\n                temperature: action.payload\r\n            };\r\n        case SET_CITY:\r\n            return {\r\n                ...state,\r\n                city: action.payload\r\n            };\r\n        case SET_COUNTRY:\r\n            return {\r\n                ...state,\r\n                country: action.payload\r\n            };\r\n        case SET_HUMIDITY:\r\n            return {\r\n                ...state,\r\n                humidity: action.payload\r\n            };\r\n        case SET_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                description: action.payload\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            };\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport { weatherReducer } from './weather/weatherReducer';\r\n\r\nexport default combineReducers({\r\n   weatherReducer\r\n})","import React, { Component, Fragment } from 'react';\r\n\r\nclass Titles extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n               <h1 className=\"title-container__title\">Weather Finder</h1>\r\n\t\t<h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\nexport default Titles;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Titles from '../Titles';\r\n\r\nclass TitlesContainer extends Component {\r\n    render() {\r\n        return (\r\n             <Titles />\r\n            );\r\n        }\r\n    }\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n           \r\n        }\r\n    }\r\n    \r\n    const mapDispatchToProps = {\r\n        \r\n    }\r\n    \r\n    export const Tiles_Wrapped =  connect(mapStateToProps, mapDispatchToProps)(TitlesContainer);\r\n","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n    getWeather = async (event) => {\r\n        const API_KEY = 'adcaa7e57695cf33f2d3340876c50f39';\r\n        const { setTemperature, setHumidity, setCountry, setCity, setDescription, setError } = this.props;\r\n        event.preventDefault();\r\n        const city = event.target.elements.city.value;\r\n        const country = event.target.elements.country.value;\r\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);      \r\n        const data = await api_call.json();\r\n        console.log(data);\r\n\r\n        if(city && country && data.cod !== \"404\") {\r\n            setTemperature(data.main.temp);\r\n            setHumidity(data.main.humidity);\r\n            setCity(data.name);\r\n            setCountry(data.sys.country);\r\n            setDescription(data.weather[0].description);\r\n            setError(null);\r\n        } \r\n\r\n        if(data.cod == \"404\") {\r\n            setTemperature(null);\r\n                setHumidity(null);\r\n                setCity(null);\r\n                setCountry(null);\r\n                setDescription(null);\r\n            setError(\"Unexpected city or coutnry\")\r\n        }\r\n\r\n        if(!city || !country) {\r\n                setTemperature(null);\r\n                setHumidity(null);\r\n                setCity(null);\r\n                setCountry(null);\r\n                setDescription(null);\r\n                setError(\"Please enter the values\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form onSubmit={this.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"city...\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"country...\"/>\r\n                <button>get weather</button>\r\n            </form>\r\n            );\r\n        }\r\n    }\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from '../Form';\r\nimport { setTemperature, setCity, setCountry, setHumidity, setDescription, setError } from '../../store/weather/weatherAction';\r\n\r\n\r\nclass FormContainer extends Component {\r\n    render() {\r\n        return (\r\n             <Form \r\n             setTemperature={this.props.setTemperature}\r\n             setCity={this.props.setCity}\r\n             setCountry={this.props.setCountry}\r\n             setHumidity={this.props.setHumidity}\r\n             setDescription={this.props.setDescription}\r\n             setError={this.props.setError}\r\n             temperature={this.props.temperature}/>\r\n            );\r\n        }\r\n    }\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n           \r\n        }\r\n    }\r\n    \r\n    const mapDispatchToProps = {\r\n        setTemperature,\r\n        setCity,\r\n        setCountry,\r\n        setHumidity,\r\n        setDescription,\r\n        setError\r\n    }\r\n    \r\n    export const Form_Wrapped =  connect(mapStateToProps, mapDispatchToProps)(FormContainer);\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nclass Weather extends Component {\r\n    render() {\r\n\r\n        const { city, country, humidity, temperature, error, description } = this.props;\r\n\r\n        return (\r\n            <div className=\"weather__info\">\r\n            {\t\r\n                city && country && <p className=\"weather__key slideLeft\"> Location: \r\n                    <span className=\"weather__value slideLeft\"> { city }, { country }</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                temperature && <p className=\"weather__key slideLeft\"> Temperature: \r\n                    <span className=\"weather__value slideLeft\"> { temperature }\t</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                humidity && <p className=\"weather__key slideLeft\"> Humidity: \r\n                    <span className=\"weather__value slideLeft\"> { humidity } </span>\r\n                </p> \r\n            }\r\n            { \t\r\n                description && <p className=\"weather__key slideLeft\"> Conditions: \r\n                    <span className=\"weather__value slideLeft\"> {description } </span>\r\n            </p> \r\n            }\r\n            { \r\n                error && <p className=\"weather__error slideLeft\">{ error }</p>  \r\n            }\r\n           </div>\r\n            );\r\n        }\r\n    }\r\n    \r\nexport default Weather;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Weather from '../Weather';\r\nimport { setTemperature, setCity, setCountry, setHumidity, setDescription, setError } from '../../store/weather/weatherAction';\r\n\r\n\r\nclass WeatherContainer extends Component {\r\n    render() {\r\n        return (\r\n             <Weather \r\n             setTemperature={this.props.setTemperature}\r\n             setCity={this.props.setCity}\r\n             setCountry={this.props.setCountry}\r\n             setHumidity={this.props.setHumidity}\r\n             setDescription={this.props.setDescription}\r\n             setError={this.props.setError}\r\n             temperature={this.props.temperature}\r\n             city={this.props.city}\r\n             error={this.props.error}\r\n             humidity={this.props.humidity}\r\n             description={this.props.description}\r\n             country={this.props.country}\r\n             />\r\n            );\r\n        }\r\n    }\r\n    const mapStateToProps = (state) => {\r\n        console.log(state);\r\n        return {\r\n            temperature: state.weatherReducer.temperature,\r\n            city: state.weatherReducer.city,\r\n            error: state.weatherReducer.error,\r\n            humidity: state.weatherReducer.humidity,\r\n            description: state.weatherReducer.description,\r\n            country: state.weatherReducer.country\r\n        }\r\n    }\r\n    \r\n    const mapDispatchToProps = {\r\n        setTemperature,\r\n        setCity,\r\n        setCountry,\r\n        setHumidity,\r\n        setDescription,\r\n        setError\r\n    }\r\n    \r\n    export const Weather_Wrapped =  connect(mapStateToProps, mapDispatchToProps)(WeatherContainer);\r\n","import React, { Component } from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers';\nimport { Tiles_Wrapped as Titles  } from './components/containers/TitlesContainer';\nimport { Form_Wrapped as Form  } from './components/containers/FormContainer';\nimport { Weather_Wrapped as Weather  } from './components/containers/WeatherContainer';\n\nconst store = createStore(rootReducer);\n\nclass App extends Component {\n\n  render() {\n    return (\n        <Provider store={store}>\n         <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n            <Titles />\n            <Form />\n            <Weather />\n            </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}